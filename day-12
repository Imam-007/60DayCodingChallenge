/*
Given an array arr[] of N elements and a number K. Split the given array into K subarrays such that the maximum subarray sum achievable out of K subarrays formed is
minimum possible. Find that possible subarray sum.
*/

class Solution {
    static int splitArray(int[] arr , int N, int K) {
        // code here
        int sum = 0, maxValue = Integer.MIN_VALUE;
        for(int a : arr) {
            sum += a;
            maxValue = Math.max(maxValue, a);
        }
        
        int low = maxValue, high = sum, ans = Integer.MAX_VALUE;
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(isValid(arr, mid, K)) {
                ans = Math.min(ans, mid);
                high = mid - 1;   // To minimize our answer
            } else {
                low = mid + 1;   // To get Valid Range
            }
        }
        return ans;
    }
    
    public static boolean isValid(int[] arr,int mid,int k) {
        int sum = 0,count = 1;
        for(int a : arr) {
            if((sum + a) <= mid) {
                sum += a;
            } else {
                sum = a;
                count++;
            }
        }
        return count <= k;
    }
};

/*
Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, 
the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).
*/

class Solution {
         public int minFallingPathSum(int[][] A) {
        int m = A.length;
        int n = A[0].length;
        

        if (m == 1 || n == 1) return A[0][0];
        
        Integer[][] dp = new Integer[m][n];
        int ans = Integer.MAX_VALUE;
        for (int i = 0; i < A.length; i++){
            ans = Math.min(ans, minFallingPathSum(A, 0, i, dp));
        }
        
        return ans;
    }
    
    int minFallingPathSum(int[][] A, int row, int col, Integer[][]dp){
        int m = A.length;
        int n = A[0].length;
        
        if (dp[row][col] != null) return dp[row][col];
        
        if (row == n-1) //If we are on the last row then we are done for this path
            return dp[row][col] = A[row][col];
        
        int left = Integer.MAX_VALUE, right = Integer.MAX_VALUE;
        if (col > 0)
         left = minFallingPathSum(A, row +1, col-1, dp);
        
        int straight = minFallingPathSum(A, row+1, col, dp);
        
        if (col < n-1)
         right = minFallingPathSum(A, row+1, col+1, dp);
            
        dp[row][col] = Math.min(left, Math.min(straight, right)) + A[row][col];
        
        return dp[row][col];
        
    }
}

 
