/*
Given an expression string x. Examine whether the pairs and the orders of {,},(,),[,] are correct in exp.
For example, the function should return 'true' for exp = [()]{}{[()()]()} and 'false' for exp = [(]).

Note: The drive code prints "balanced" if function return true, otherwise it prints "not balanced".

Example 1:

Input:
{([])}
Output: 
true
Explanation: 
{ ( [ ] ) }. Same colored brackets can form 
balanced pairs, with 0 number of 
unbalanced bracket.

*/

class Solution
{
    //Function to check if brackets are balanced or not.
    static boolean ispar(String x)
    {
        // add your code here
        char c;
        Stack<Character>str=new Stack<>();
        for(int i=0;i<x.length();i++){
            char ch=x.charAt(i);
            if(ch=='('||ch=='{'||ch=='['){
                str.push(ch);
                continue;
            }
            if(str.isEmpty()){
                return false;
            }
            switch(ch){
                case ')':
                    c=str.pop();
                    if(c=='['||c=='}'){
                        return false;
                    }
                    break;
                    case ']':
                        c=str.pop();
                        if(c=='('||c=='{'){
                            return false;
                        }
                        break;
                    case '}':
                        c=str.pop();
                        if(c=='('||c=='['){
                            return false;
                        }
                        break;
            }
        }
        if(!str.isEmpty()){
            return false;
        }
        return true;
    }
}

/*
Given an array A of n positive numbers. The task is to find the first Equilibrium Point in an array. 
Equilibrium Point in an array is a position such that the sum of elements before it is equal to the sum of elements after it.

Note: Retun the index of Equilibrium point. (1-based index)

Example 1:

Input: 
n = 5 
A[] = {1,3,5,2,2} 
Output: 3 
Explanation:  
equilibrium point is at position 3 
as elements before it (1+3) = 
elements after it (2+2). 

*/

class Solution {

    
    // a: input array
    // n: size of array
    // Function to find equilibrium point in the array.
    public static int equilibriumPoint(long arr[], int n) {

        // Your code here
        
            int sum=0;
            for(int i=0;i<n;i++){
                sum+=arr[i];
            }
            int leftsum=0;
            for(int i=0;i<n;i++){
                sum-=arr[i];
                if(leftsum==sum){
                    return i+1;
                }
                leftsum+=arr[i];
            }
        
        return -1;
    }
}
