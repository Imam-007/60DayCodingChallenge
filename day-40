/*
You are given a pointer/ reference to the node which is to be deleted from the linked list of N nodes. The task is to delete the node. Pointer/ reference to head node is not given. 
Note: No head reference is given to you. It is guaranteed that the node to be deleted is not a tail node in the linked list.

Example 1:

Input:
N = 2
value[] = {1,2}
node = 1
Output: 2
Explanation: After deleting 1 from the
linked list, we have remaining nodes
as 2.

*/

class Solution
{
    void deleteNode(Node del)
    {
         // Your code here
         del.data=del.next.data;
         del.next=del.next.next;
    }
}

/*
Given a string s, remove all its adjacent duplicate characters recursively. 

Note: For some test cases, the resultant string would be an empty string. In that case, the function should return the empty string only.

Example 1:

Input:
S = "geeksforgeek"
Output: "gksforgk"
Explanation: 
g(ee)ksforg(ee)k -> gksforgk

*/

class Solution{
    String rremove(String s) {
        // code here
        // code here
        int n = s.length();
        if(n==0 || n==1) return s;
        StringBuilder sb = new StringBuilder();
        if(s.charAt(0)!=s.charAt(1)){
            sb.append(s.charAt(0));
        }
        for(int i=1;i<n-1;i++){
            if(s.charAt(i-1)==s.charAt(i) || s.charAt(i)==s.charAt(i+1)){
                continue;
            }
            else sb.append(s.charAt(i));
        }
        if(s.charAt(n-2)!=s.charAt(n-1)){
            sb.append(s.charAt(n-1));
        }
        if(sb.length()==n){
            return sb.toString();
        }
        return rremove(sb.toString());
    }
}
