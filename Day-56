/*
Given a boolean 2D array of n x m dimensions where each row is sorted. Find the 0-based index of the first row that has the maximum number of 1's.

Example 1:

Input: 
N = 4 , M = 4
Arr[][] = {{0, 1, 1, 1},
           {0, 0, 1, 1},
           {1, 1, 1, 1},
           {0, 0, 0, 0}}
Output: 2
Explanation: Row 2 contains 4 1's (0-based
indexing).
*/

class Solution {
    int rowWithMax1s(int arr[][], int n, int m) {
        // code here
        int max=0,index=-1;
        for(int i=0;i<n;i++){
            int count=0;
            for(int j=0;j<m;j++){
                if(arr[i][j]==1){
                    count++;
                }
            }
            if(count>max){
                max=count;
                index=i;
            }
        }
        return index;
    }
}

/*
Given two arrays: a1[0..n-1] of size n and a2[0..m-1] of size m. Task is to check whether a2[] is a subset of a1[] or not. Both the arrays can be sorted or unsorted. 
 

Example 1:

Input:
a1[] = {11, 1, 13, 21, 3, 7}
a2[] = {11, 3, 7, 1}
Output:
Yes
Explanation:
a2[] is a subset of a1[]
*/

class Compute {
    public String isSubset( long a1[], long a2[], long n, long m) {
        Map<Long,Boolean>map=new HashMap<>();
        for(int i=0;i<n;i++){
            map.put(a1[i],true);
        }
        for(int i=0;i<m;i++){
            if(!map.containsKey(a2[i])){
                return "No";
            }
        }
        return "Yes";
    }
}
