/*
You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

*/

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        List<Integer>list=new ArrayList<>();
        ListNode temp=list1;
        while(temp!=null){
            list.add(temp.val);
            temp=temp.next;
        }
        temp=list2;
         while(temp!=null){
            list.add(temp.val);
            temp=temp.next;
        }
        Collections.sort(list);
        ListNode head=null,tail=null;
        for(int i=0;i<list.size();i++){
            ListNode newNode=new ListNode(list.get(i));
            if(head==null){
                head=tail=newNode;              

            }else{
                tail.next=newNode;
                tail=newNode;
            }

        }
        return head;
        
    }
}

/*

Given a binary tree, find the largest value in each level.


Example 1:

Input:
        1
       / \
      2   3 
Output:
1 3
Explanation:
At 0 level, values of nodes are {1}
                 Maximum value is 1
At 1 level, values of nodes are {2,3}
                Maximum value is 3
 */
 
 class Solution {
    ArrayList<Integer> maximumValue(Node node) {
       //code here
       ArrayList<Integer> ans=new ArrayList<>();

        Queue<Node> q=new LinkedList<>();

        if(node==null)return ans;

        q.add(node);

        while(!q.isEmpty()){

            int qsize=q.size();

            int max=0;

            for(int i=0;i<qsize;i++){

                if(q.peek().left!=null)q.add(q.peek().left);

                if(q.peek().right!=null)q.add(q.peek().right);

                max=Math.max(max,q.poll().data);

            }

            ans.add(max);

        }

        return ans;
    }
}
