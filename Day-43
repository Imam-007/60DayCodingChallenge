/*
You are given an array arr[ ] of integers having N elements and a non-weighted undirected graph having N nodes and M edges. The details of each edge in the graph
is given to you in the form of list of list. 
Your task is to find the number of lucky permutations of the given array. 

An array permutation is said to be lucky if for every node Vi  [1 < i < N-1] in the array there exists an edge between the nodes Vi and Vi+1 in the given graph.

Example 1:

Input:
N = 3, M = 2
arr = {1, 2, 3}
graph = {{3, 1}, {1, 2}}
Output:
2
Explanation:
All possible permutations of the 
array are as follows-
{1,2,3}: There is an edge between 1 and 
2 in the graph but not betwen 2 and 3.

{2,1,3}: There is an edge between (2,1)
and (1,3) in the graph.

{3,1,2}: There is an edge between (3,1)
and (1,2) in the graph.

Out of the 3 possible permutations, 
2 are lucky. Therefore, answer is 2.

*/

class Solution {
    long luckyPermutations(int N, int M, int arr[], int[][] graph) {
        // Code here
        int[][] adj = new int[N + 1][N + 1];
        
        for(int[] e : graph){
            adj[e[0]][e[1]]++;
            adj[e[1]][e[0]]++;
        }
        
        long[][] dp = new long[N][(1 << N)];
        
        for(int i=0; i<N; i++){
            dp[i][(1 << i)]++;
        }
        
        for(int i=1; i < (1 << N); i++){
            for(int j=0; j<N; j++){
                
                if(((i >> j) & 1) != 0 ){
                    
                    for(int k=0; k<N; k++){
                        
                        if(k != j && arr[k] != arr[j] && ((i >> k) & 1) != 0 && adj[arr[j]][arr[k]] == 1){
                            dp[j][i] += dp[k][(i ^ (1 << j))];
                        }
                        
                    }
                    
                }
                
            }
        }
        
        long counter = 0l;
        
        for(int i=0; i<N; i++){
            counter += dp[i][(1 << N) - 1];
        }
        
        return counter;
    }
}

/*
Given a linked list consisting of L nodes and given a number N. The task is to find the Nth node from the end of the linked list.

Example 1:

Input:
N = 2
LinkedList: 1->2->3->4->5->6->7->8->9
Output: 8
Explanation: In the first example, there
are 9 nodes in linked list and we need
to find 2nd node from end. 2nd node
from end is 8.  

*/

class GfG
{
    //Function to find the data of nth node from the end of a linked list.
    int getNthFromLast(Node head, int n)
    {
    	// Your code here	
    	Node mainptr=head;
    	Node tempptr=head;
    	int count=0;
    	int size=0;
    	while(head!=null){
    	    size++;
    	    head=head.next;
    	}
    	if(size<n){
    	    return -1;
    	}else{
    	    while(n>count){
    	    tempptr=tempptr.next;
    	    count++;
    	  }
    	  while(tempptr!=null){
    	      tempptr=tempptr.next;
    	      mainptr=mainptr.next;
    	  }
    	  return mainptr.data;
    	}
    }
}
