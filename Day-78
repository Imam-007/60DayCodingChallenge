/*
Geek just learned about Fibonacci numbers.

The Fibonacci Sequence is the series of numbers: 0, 1, 1, 2, 3, 5, 8, 13, ...
where the next number is found by adding up the two numbers before it.

He defines a new series called Geeky numbers. Here the next number is the sum of the K preceding numbers.
You are given an array of size K, GeekNum[ ], where the ith element of the array represents the ith Geeky number. Return its Nth term.

Note: This problem can be solved in O(N2) time complexity but the user has to solve this in O(N). The Constraints are less because there can be integer overflow in the
terms.

Example 1:

Input:
N = 6, K = 1
GeekNum[] = {4}
Output: 
4
Explanation: 
Terms are 4, 4, 4, 4, 4, 4

*/

class Solution {
    static long solve(int n, int k, ArrayList<Long> list) {
        //code here
        long sum = 0;
        for(long l: list) sum += l;
        
        for(int curr=k; curr<n; curr++)  {
            list.add(sum);
            sum = sum + list.get(curr) - list.get(curr-k);
        }
        return list.get(n-1);
    }
}


/*
Given an undirected connected graph with V vertices and adjacency list adj. You are required to find all the vertices removing which (and edges through it)
disconnects the graph into 2 or more components.
Note: Indexing is zero-based i.e nodes numbering from (0 to V-1). There might be loops present in the graph.

*/

class Solution
{
    //Function to return Breadth First Traversal of given graph.
        // Code here
        private void dfs(int node,int parent,boolean vis[],int tin[],int low[],
   ArrayList<ArrayList<Integer>> adj,int timer, ArrayList<Integer> a){
       vis[node]=true;
       tin[node]=low[node]=timer++;
       int child=0;
       for(Integer x:adj.get(node)){
           if(x==parent)
               continue;
           if(!vis[x]){
               dfs(x,node,vis,tin,low,adj,timer,a);
               low[node]=Math.min(low[node],low[x]);
               if(low[x]>=tin[node] && parent!=-1){
                   if(!a.contains(node))
                       a.add(node);
               }
               child++;//if there is dfs  call for multiple childs we take note of it
           }else if(vis[x] && x!=parent){
               low[node]=Math.min(low[node],tin[x]);
           }
       }
       if(parent ==-1 && child>1){//if the starting node has more than 1 components
       //that are not connceted to each other
           a.add(node);
       }
   }
   public ArrayList<Integer> articulationPoints(int V,ArrayList<ArrayList<Integer>> adj)
   {
       // Code here
       boolean vis[]=new boolean[V];
       int low[]=new int[V];
       int tin[]=new int[V];
       int timer=0;
       ArrayList<Integer> a=new ArrayList<Integer>();
       for(int i=0;i<V;i++){
           if(!vis[i]){
               dfs(i,-1,vis,tin,low,adj,timer,a);
           }
       }
       if(a.size()==0)
           {
               a.add(-1);
               return a;
           }
       Collections.sort(a);
       //a.remove(a.get(0));
       return a;
    }
}
