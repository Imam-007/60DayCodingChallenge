/*
Given a binary matrix of dimensions N * M. One can perform the given operation into the matrix.

If the value of matrix[i][j] is 0, then traverse in the same direction and check the next value.
If the value of matrix[i][j] is 1, then update matrix[i][j] to 0 and change the current direction from up, right, down, or left to the directions right, down, left, and
up respectively.
Initially you start from cell(0, 0), moving in right direction.

The task is to find the indices of the matrix  which leads to outside the matrix from the traversal of the given matrix from the cell (0, 0) by performing the operations.

Example 1:

Input:
matrix[][] = {{0,1},
              {1,0}}

Output: (1,1)

*/

class Solution{
    static int [] endPoints(int [][]arr, int m, int n){
        //code here
        //code here
        return f(arr,0,0,0,-1,-1);
    }
    // 0 -> right , 1 -> down , 2 -> left , 3 -> up;
    static int[] f(int[][] a,int i,int j,int dir,int pi,int pj) {
        if(i<0 || j<0 || i>=a.length || j>=a[i].length) return new int[]{pi,pj};
        int[] ans;
        if(dir==0) {
            if(a[i][j]==0) {
                ans = f(a,i,j+1,dir,i,j);
            } else {
                a[i][j]=0;
                ans = f(a,i+1,j,1,i,j);
            }
        } else if(dir==1) {
            if(a[i][j]==0) {
                ans = f(a,i+1,j,dir,i,j);
            } else {
                a[i][j]=0;
                ans = f(a,i,j-1,2,i,j);
            }
        } else if(dir==2) {
            if(a[i][j]==0) {
                ans = f(a,i,j-1,dir,i,j);
            } else {
                a[i][j]=0;
                ans = f(a,i-1,j,3,i,j);
            }
        } else {
            if(a[i][j]==0) {
                ans = f(a,i-1,j,dir,i,j);
            } else {
                a[i][j]=0;
                ans = f(a,i,j+1,0,i,j);
            }
        }
        return ans;
    }
}

/*
You are given an array arr[] of size n. Find the total count of sub-arrays having their sum equal to 0.


Example 1:

Input:
n = 6
arr[] = {0,0,5,5,0,0}
Output: 6
Explanation: The 6 subarrays are 
[0], [0], [0], [0], [0,0], and [0,0].

*/

class Solution{
    //Function to count subarrays with sum equal to 0.
    public static long findSubarray(long[] arr ,int n) 
    {
        //Your code here
          HashMap<Long, Long> map = new HashMap<>();

        long sum =0, count =0;

        map.put((long)0, (long)1);

        for(int i=0; i< n; i++){

            sum += arr[i];

            if(map.containsKey(sum)){

                count += map.get(sum);

            }

            map.put(sum, map.getOrDefault(sum, (long)0) + (long)1);

        }

        return count;
    }
}
