/*
Given an array arr[] consisting of n integers, find the length of the longest subarray with positive (non zero) product.

Example 1:

Input:
arr[] ={0, 1, -2, -3, -4} 
Output:
3
Explanation: 
The longest subarray with positive product is: 
{1, -2, -3}.Therefore, the required length is 3.

*/

class Solution{
    /* Function to return the length of the
       longest subarray with ppositive product */
    int maxLength(int arr[], int n) { 
        //code here
        int strt=0,first_negative=-1,count_negative=0;
        int ans=0;
        for(int i=0;i<n;i++) {
            if(arr[i]==0) {
                strt=i+1;
                first_negative=-1;
                count_negative=0;
                continue;
            } else if(arr[i]<0) {
                count_negative++;
                if(first_negative==-1) first_negative=i;
            }
            
            if(count_negative%2==0) {
                ans = Math.max(ans,i-strt+1);
            } else {
                ans = Math.max(ans,i-first_negative);
            }
        }
        return ans;
    }
   
}


/*
Given two unsorted arrays arr1[] and arr2[]. They may contain duplicates. For each element in arr1[] count elements less than or equal to it in array arr2[].

Example 1:

Input:
m = 6, n = 6
arr1[] = {1,2,3,4,7,9}
arr2[] = {0,1,2,1,1,4}
Output: 4 5 5 6 6 6
Explanation: Number of elements less than
or equal to 1, 2, 3, 4, 7, and 9 in the
second array are respectively 4,5,5,6,6,6

*/

class Solution
{
    public static ArrayList<Integer> countEleLessThanOrEqual(int arr1[], int arr2[], int m, int n)
    {
       // add your code here
       ArrayList<Integer>list=new ArrayList<>();
       Arrays.sort(arr2);
        for(int i=0;i<m;i++){
           int count=0;
           int low=0;
           int high=n-1;
           while(high>=low){
               int mid=(low+high)/2;
               if(arr1[i]>=arr2[mid]){
                   count=count+(mid-low)+1;
                   low=mid+1;
               }else{
                   high=mid-1;
               }
           }
           list.add(count);
       }
       return list;
    }
}
