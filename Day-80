/*
Two of the nodes of a Binary Search Tree (BST) are swapped. Fix (or correct) the BST by swapping them back. Do not change the structure of the tree.
Note: It is guaranteed than the given input will form BST, except for 2 nodes that will be wrong.
 
Example 1:
Input:
       10
     /    \
    5      8
   / \
  2   20
Output: 1
Explanation:
 
 */
 
 class Solution {
    Node w1 = null, w2 = null;
    public Node correctBST(Node root) {
        inorder(root);
        // System.out.println(w1.data+" "+w2.data);
        int temp = w1.data;
        w1.data = w2.data;
        w2.data = temp;
        return root;
    }
    Node prev = null;
    public void inorder(Node root) {
        if(root == null) return;
        // last = root;
        inorder(root.left);
        if(prev!=null){
            if(prev.data > root.data){
                if(w1 == null) w1 = prev;
                 w2 = root;
            }
        }
        prev = root;
        inorder(root.right);
    }
}


/*
Given two strings S1 and S2 of equal length, the task is to determine if S2 is a scrambled form of S1.

Scrambled string: Given string str, we can represent it as a binary tree by partitioning it into two non-empty substrings recursively.
Below is one possible representation of str = coder:
 
To scramble the string, we may choose any non-leaf node and swap its two children. 
Suppose, we choose the node co and swap its two children, it produces a scrambled string ocder.
Similarly, if we continue to swap the children of nodes der and er, it produces a scrambled string ocred.

Note: Scrambled string is not the same as an Anagram.

Print "Yes" if S2 is a scrambled form of S1 otherwise print "No".

Example 1:

Input: S1="coder", S2="ocder"
Output: Yes
Explanation: ocder is a scrambled 
form of coder.

    ocder
   /    \
  oc    der
 / \    
o   c  

As "ocder" can represent it 
as a binary tree by partitioning 
it into two non-empty substrings.
We just have to swap 'o' and 'c' 
to get "coder".

*/

class Solution{
    static HashMap<String,Boolean> map=new HashMap<>();
    static boolean isScramble(String s1,String s2)
    {
        //code here
        if(s1.equals(s2))
        {
            return true;
        }
        String key=s1+"_"+s2;
        if(map.containsKey(key))
        {
            return map.get(key);
        }
        boolean flag=false;
        int n=s1.length();
        for(int i=1;i<n;i++)
        {
             boolean swap=(isScramble(s1.substring(0, i),s2.substring(n - i,n)) && isScramble(s1.substring(i, n),s2.substring(0, n-i)));
            boolean noswap=(isScramble(s1.substring(0, i),s2.substring(0, i))  && isScramble(s1.substring(i, n),s2.substring(i, n)));
            if(noswap||swap)
            {
                flag=true;
                break;
            }
        }
        map.put(key,flag);
        return flag;
    }
}
