/*
There are M job applicants and N jobs.  Each applicant has a subset of jobs that he/she is interested in. Each job opening can only accept one applicant and a job
applicant can be appointed for only one job. Given a matrix G with M rows and N columns where G(i,j) denotes ith applicant is interested in the jth job. Find the maximum
number of applicants who can get the job.

Example 1:

Input: 
M = 3, N = 5
G = {{1,1,0,1,1},{0,1,0,0,1},
{1,1,0,1,1}}
Output: 3
Explanation: There is one of the possible
assignment-
First applicant gets the 1st job.
Second applicant gets the 2nd job.
Third applicant gets the 4th job.

*/

class Solution
{
    public int maximumMatch(int[][] G)
    {
        // Code here
        int m = G.length;
        int n = G[0].length;
        int[] match = new int[n];
        int result = 0;
        
        Arrays.fill(match, -1);

        for (int u = 0; u < m; u++) {
          boolean[] vis = new boolean[n];
          if (bfs(u, G, match, vis)) result++;
        }
        return result;
    }

    private static boolean bfs(int u, int[][] g, int[] match, boolean[] vis) {
        for (int v = 0; v < g[0].length; v++) {
            if (g[u][v] == 1 && !vis[v]) {
                vis[v] = true;
                if (match[v] == -1 || bfs(match[v], g, match, vis)) {
                  match[v] = u;
                  return true;
                }
            }
        }
        return false;
    }
}

/*
Given an array containing N integers and an integer K., Your task is to find the length of the longest Sub-Array with the sum of the elements equal to the given value
K.

 

Example 1:
 

Input :
A[] = {10, 5, 2, 7, 1, 9}
K = 15
Output : 4
Explanation:
The sub-array is {5, 2, 7, 1}.

*/


class Solution{
    
   
    // Function for finding maximum and value pair
    public static int lenOfLongSubarr (int arr[], int n, int k) {
        //Complete the function
        
        HashMap<Integer,Integer>map=new HashMap<>();
        
        map.put(0,-1);
        int sum=0,len=0;
        
        for(int i=0;i<n;i++){
            sum+=arr[i];
            if(map.containsKey(sum-k)){
                len=Math.max(len,Math.abs(i-map.get(sum-k)));
            }
            if(!map.containsKey(sum)){
                map.put(sum,i);
            }
        }
        return len;
    }   
    
}
