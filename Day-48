/*
Given a singly linked list of N nodes. Find the first node of the loop if the linked list has a loop. If a loop is present return the node data of the first node of
the loop else return -1.

Example 1:

Input:

Output: 3
Explanation:
We can see that there exists a loop 
in the given linked list and the first
node of the loop is 3.

*/

class Solution {
    //Function to find first node if the linked list has a loop.
    public static int findFirstNode(Node head){
        //code here
        Node slow = head;
        Node fast = head;
        while(slow != null && fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast)  break;
        }
        if(slow != fast)  return -1;
        slow = head;
        while(slow != fast){
            slow = slow.next;  fast = fast.next;
        }
        return slow.data;
    }
}

/*
Given an array A of n positive numbers. The task is to find the first Equilibrium Point in an array. 
Equilibrium Point in an array is a position such that the sum of elements before it is equal to the sum of elements after it.

Note: Retun the index of Equilibrium point. (1-based index)

Example 1:

Input: 
n = 5 
A[] = {1,3,5,2,2} 
Output: 3 
Explanation:  
equilibrium point is at position 3 
as elements before it (1+3) = 
elements after it (2+2). 
*/

class Solution {

    
    // a: input array
    // n: size of array
    // Function to find equilibrium point in the array.
    public static int equilibriumPoint(long arr[], int n) {

        // Your code here
        if(n==1){
            return 1;
        }else{
            int sum=0;
            for(int i=0;i<n;i++){
                sum+=arr[i];
            }
            int leftsum=0;
            for(int i=0;i<n;i++){
                sum-=arr[i];
                if(leftsum==sum){
                    return i+1;
                }
                leftsum+=arr[i];
            }
            
        }
        
        return -1;
    }
}
