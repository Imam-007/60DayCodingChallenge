/*
Given a linked list consisting of L nodes and given a number N. The task is to find the Nth node from the end of the linked list.

Example 1:

Input:
N = 2
LinkedList: 1->2->3->4->5->6->7->8->9
Output: 8
Explanation: In the first example, there
are 9 nodes in linked list and we need
to find 2nd node from end. 2nd node
from end is 8.  

*/

class GfG
{
    //Function to find the data of nth node from the end of a linked list.
    int getNthFromLast(Node head, int n)
    {
    	// Your code here	
    	Node mainptr=head;
    	Node tempptr=head;
    	int count=0;
    	int size=0;
    	while(head!=null){
    	    size++;
    	    head=head.next;
    	}
    	if(size<n){
    	    return -1;
    	}else{
    	    while(n>count){
    	    tempptr=tempptr.next;
    	    count++;
    	  }
    	  while(tempptr!=null){
    	      tempptr=tempptr.next;
    	      mainptr=mainptr.next;
    	  }
    	  return mainptr.data;
    	}
    }
}

/*

An element is called a peak element if its value is not smaller than the value of its adjacent elements(if they exists).
Given an array arr[] of size N, Return the index of any one of its peak elements.
Note: The generated output will always be 1 if the index that you return is correct. Otherwise output will be 0. 


Example 1:

Input: 
N = 3
arr[] = {1,2,3}
Possible Answer: 2
Generated Output: 1
Explanation: index 2 is 3.
It is the peak element as it is 
greater than its neighbour 2.
If 2 is returned then the generated output will be 1 else 0.

*/

class Solution
{
	// Function to find the peak element
	// arr[]: input array
	// n: size of array a[]
	public int peakElement(int[] arr,int n)
    {
       //add code here.
       int max=Integer.MIN_VALUE;
       int index=-1;
       for(int i=0;i<n;i++){
           if(arr[i]>max){
               max=arr[i];
               index=i;
           }
       }
       return index;
    }
}
