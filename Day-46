/*
Given an array arr[ ] of size n having distinct elements, the task is to find the next greater element for each element of the array in order of their appearance in
the array.
Next greater element of an element in the array is the nearest element on the right which is greater than the current element.
If there does not exist next greater of current element, then next greater element for current element is -1. For example, next greater of the last element is always -1.

Example 1:

Input: 
n = 4, arr[] = [1 3 2 4]
Output:
3 4 4 -1
Explanation:
In the array, the next larger element 
to 1 is 3, 3 is 4, 2 is 4 and for 4? 
since it doesn't exist, it is -1.

*/

class Solution{
    public static long[] nextLargerElement(long[] arr, int n) { 
        // Your code here
         Stack<Long> stack = new Stack<>();
        
        long[] ans = new long[n];
        for(int i=n-1;i>=0;i--){
            
            while(!stack.isEmpty() && stack.peek()<arr[i])
                stack.pop();
                
            if(stack.isEmpty())
                ans[i] = -1;
            else ans[i] = stack.peek();  
            
            stack.push(arr[i]);
        }
        return ans;
    } 
}

/*
Given a singly linked list of size N of integers. The task is to check if the given linked list is palindrome or not.

Example 1:

Input:
N = 3
value[] = {1,2,1}
Output: 1
Explanation: The given linked list is
1 2 1 , which is a palindrome and
Hence, the output is 1.
*/

class Solution
{
    //Function to check whether the list is palindrome.
    boolean isPalindrome(Node head) 
    {
        //Your code here
        String str="";
        while(head!=null){
            str+=head.data;
            head=head.next;
        }
        int size=str.length();
        for(int i=0;i<size/2;i++){
            if(str.charAt(i)!=str.charAt(size-i-1)){
                return false;
            }
        }
        return true;
    }    
}
