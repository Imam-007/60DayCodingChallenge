/*
You are given N balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array arr. You are asked to brust all the balloons.
If you brust the ith  balloon,, you will get arr[ i - 1 ] * arr[ i ] * arr[ i + 1] coins. If i - 1, or i + 1 goes out of bounds of the array, consider it as if there
is a balloon with a 1 painted on it.
Return the maximum coins you can collect by brusting the balloons wisely.

Example 1:

Input:
N = 4
arr[ ] = {3, 1, 5, 8}
Output: 167
Explanation: 
arr[ ] = {3, 1, 5, 8}  - - > {3, 5, 8} - - > {3, 8} - - > { 8} - -> { }
coins = 3 *1 *5,      +      3*5*8     +   1*3*8   +  1*8*1   = 167

*/

class Solution {
    // code here
    public static int memoization(int start, int end, int[] nums, int[][] dp) {
		if (start > end) {
			return 0;
		}
		if (dp[start][end] != -1) {
			return dp[start][end];
		}
		int max = Integer.MIN_VALUE;
		for (int k = start; k <= end; k++){
			int cost = nums[start - 1] * nums[k] * nums[end + 1] + memoization(start, k - 1, nums, dp) + memoization(k + 1, end, nums, dp);
			max = Math.max(max, cost);
		}
		return dp[start][end] = max;
	}

	public static int maxCoins(int N, int[] arr) {
		int[] nums = new int[arr.length + 2];
		nums[0] = 1;
		nums[arr.length + 1] = 1;
		for (int i = 0; i < arr.length; i++) {
			nums[i + 1] = arr[i];
		}
		int[][] dp = new int[N + 1][N + 1];
		for (int[] row : dp) {
			Arrays.fill(row, -1);
		}
		return memoization(1, N, nums, dp);

    }
}
     
/*

Given a string s, reverse only all the vowels in the string and return it.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.

 

Example 1:

Input: s = "hello"
Output: "holle"

*/

class Solution {
    public String reverseVowels(String str) {
    Set<Character> vowels = new HashSet<>();
    vowels.add('a');
    vowels.add('A');
    vowels.add('e');
    vowels.add('E');
    vowels.add('i');
    vowels.add('I');
    vowels.add('o');
    vowels.add('O');
    vowels.add('u');
    vowels.add('U');
    
    int low = 0;
    int high = str.length()-1;
    
    StringBuilder s = new StringBuilder(str);
    
    //hello -> holle
    
    while(low < high)
    {
        if(vowels.contains(s.charAt(low)) && vowels.contains(s.charAt(high)))
        {
            char left = s.charAt(low);
            char right = s.charAt(high);
            
            s.setCharAt(high,left);
            s.setCharAt(low,right);
            
            low++;
            high--;
            
        }
        else
        {
            if(!vowels.contains(s.charAt(low)))
            {
                low++;
            }
            
            if(!vowels.contains(s.charAt(high)))
            {
                high--;
            }
        }
    }
    
    return s.toString();
        
    }
}
