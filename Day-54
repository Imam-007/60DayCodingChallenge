/*
Given an array with N distinct elements, convert the given array to a reduced form where all elements are in range from 0 to N-1. The order of elements is same, i.e., 0 is placed in place of smallest element, 1 is placed for second smallest element, N-1 is placed for largest element.

Note: You don't have to return anything. You just have to change the the given array.

Example 1:

Input:
N = 3
Arr[] = {10, 40, 20}
Output: 0 2 1
Explanation: 10 is the least element so it
is replaced by 0. 40 is the largest
element so it is replaced by 3-1 = 2. And
20 is the 2nd smallest element so it is
replaced by 1.
*/

class Solution {
    void convert(int[] arr, int n) {
        // code here
        int[] brr=new int[n];
        for(int i=0;i<n;i++){
            brr[i]=arr[i];
        }
        Arrays.sort(arr);
        Map<Integer,Integer>map=new HashMap<>();
        for(int i=0;i<n;i++){
            map.put(arr[i],i);
        }
        for(int i=0;i<n;i++){
            arr[i]=map.get(brr[i]);
            
        }
    }
}

/*
Given a sorted array containing only 0s and 1s, find the transition point. 


Example 1:

Input:
N = 5
arr[] = {0,0,0,1,1}
Output: 3
Explanation: index 3 is the transition 
point where 1 begins.

*/

int transitionPoint(int arr[], int n) {
    // code here
    int val=0;
    for(int i=0;i<n;i++){
        if(arr[i]>val){
            return i;
        }
    }
    return -1;
}
