/*
Given an array Arr of size N containing positive integers. Find the maximum sum of a subsequence such that no two numbers in the sequence should be adjacent in the array.

Example 1:

Input:
N = 6
Arr[] = {5, 5, 10, 100, 10, 5}
Output: 110
Explanation: If you take indices 0, 3
and 5, then Arr[0]+Arr[3]+Arr[5] =
5+100+5 = 110.

*/

class Solution {
    int findMaxSum(int arr[], int n) {
        // code here
         int ans=0,max=0,max1=0;
        for(int i=0;i<n;i++) {
            int val = arr[i]+max;
            max = Math.max(max,max1);
            max1 = Math.max(max1,val);
            ans = Math.max(ans,val);
        }
        return ans;
    }
}


/*
Given two sorted arrays arr1[] and arr2[] of sizes n and m in non-decreasing order. Merge them in sorted order without using any extra space. Modify arr1 so that it
contains the first N elements and modify arr2 so that it contains the last M elements.
 

Example 1:

Input: 
n = 4, arr1[] = [1 3 5 7] 
m = 5, arr2[] = [0 2 6 8 9]
Output: 
arr1[] = [0 1 2 3]
arr2[] = [5 6 7 8 9]
Explanation:
After merging the two 
non-decreasing arrays, we get, 
0 1 2 3 5 6 7 8 9.

*/

class Solution
{
    //Function to merge the arrays.
    public static void merge(long arr1[], long arr2[], int n, int m) 
    {
        // code here\
        int len1=arr1.length-1,len2=0;
        while(len1>=0&&len2<m){
            if(arr1[len1]>arr2[len2]){
                long temp=arr1[len1];
                arr1[len1]=arr2[len2];
                arr2[len2]=temp;
                len1--;
                len2++;
            }else{
                break;
            }
        }
        Arrays.sort(arr1);
        Arrays.sort(arr2);
    }
}
