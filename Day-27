/*
Given a sorted array of size N and an integer K, find the position at which K is present in the array using binary search.

Example 1:

Input:
N = 5
arr[] = {1 2 3 4 5} 
K = 4
Output: 3
Explanation: 4 appears at index 3.
*/
class Solution{
public:
    int binarysearch(int arr[], int n, int k){
        // code here
        int low=0;
        int high=n-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(k==arr[mid]){
                return mid;
            }
            else if(k<arr[mid]){
                high=mid-1;
            }else{
                low=mid+1;
            }
        }
        return -1;
    }
};

/*

Given an array of N integers, and an integer K, find the number of pairs of elements in the array whose sum is equal to K.


Example 1:

Input:
N = 4, K = 6
arr[] = {1, 5, 7, 1}
Output: 2
Explanation: 
arr[0] + arr[1] = 1 + 5 = 6 
and arr[1] + arr[3] = 5 + 1 = 6.
*/
class Solution {
    int getPairsCount(int[] arr, int n, int k) {
       
        
        HashMap<Integer,Integer>map=new HashMap<>();
        int count=0;
        
        for(int i=0;i<n;i++){
            int key=k-arr[i];
           
            if(map.containsKey(key)){
                count=count+map.get(key);
            }
            map.put(arr[i],map.getOrDefault(arr[i],0)+1);
        }
        return count;
    }
}
