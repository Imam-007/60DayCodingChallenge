/*
Given a maze with N cells. Each cell may have multiple entry points but not more than one exit (i.e entry/exit points are unidirectional doors like valves).
You are given an array Edge[] of N integers, where Edge[i] contains the cell index that can be reached from cell i in one step. Edge[i] is -1 if the ith cell 
doesn't have an exit. 
The task is to find the cell with maximum weight (The weight of a cell is the sum of cell indexes of all cells pointing to that cell). If there are multiple cells
with the maximum weight return the cell with highest index.

Note: The cells are indexed with an integer value from 0 to N-1. If there is no cell pointing to the ith cell then the weight of the i'th cell is zero.

Example 1:

Input:
N = 4
Edge[] = {2, 0, -1, 2}
Output: 2
Explanation: 
1 -> 0 -> 2 <- 3
weight of 0th cell = 1
weight of 1st cell = 0 
(because there is no cell pointing to the 1st cell)
weight of 2nd cell = 0+3 = 3
weight of 3rd cell = 0
There is only one cell which has maximum weight
(i.e 2) So, cell 2 is the output.

*/

class Solution{
    public int maxWeightCell(int N, int Edge[]){
       int mem[] = new int[N];
       
       for(int i=0; i<N; i++)
       {
           if(Edge[i]!=-1) mem[Edge[i]] += i;
       }
       
       
       int max_val = 0;
       
       for(int i=0; i<N; i++)
       {
           max_val = Math.max(max_val, mem[i]);
       }
       
       for(int i=N-1; i>=0; i--)
       {
           if(mem[i]==max_val) return i;
       }
       
       return 0;
    }
}

/*
Given two arrays a[] and b[] of size n and m respectively. The task is to find the number of elements in the union between these two arrays.

Union of the two arrays can be defined as the set containing distinct elements from both the arrays. If there are repetitions, then only one occurrence of element should be printed in the union.

Note : Elements are not necessarily distinct.

Example 1:

Input:
5 3
1 2 3 4 5
1 2 3
Output: 
5
Explanation: 
1, 2, 3, 4 and 5 are the
elements which comes in the union set
of both arrays. So count is 5.
*/
class Solution{
    public static int doUnion(int a[], int n, int b[], int m) 
    {
        //Your code here
        HashSet<Integer> hs=new HashSet<Integer>();
       
       for(int i=0;i<n;i++)
       {
           hs.add(a[i]);
       }
       
         
       for(int i=0;i<m;i++)
       {
           hs.add(b[i]);
       }
       
       int x=hs.size();
       
       return x;
    }
}
