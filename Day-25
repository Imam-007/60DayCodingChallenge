/*
Akku likes binary numbers and she likes playing with these numbers. Her teacher once gave her a question.For given value of  L and R, Akku have to find the count of 
number X, which have only three-set bits in it's binary representation such that "L ≤ X ≤ R".Akku is genius, she solved the problem easily. Can you do it ??

Example 1:

Input:
L = 11 and R = 19 
Output: 4
Explanation:
There are 4 such numbers with 3 set bits in 
range 11 to 19.
11 -> 1011
13 -> 1101
14 -> 1110
19 -> 10011

*/

class Solution{
    
    void precompute(){
        // Code Here
    }
    long solve(long L, long R){
        // Code here
        return f(R,63,0,0)-f(L-1,63,0,0);
        
    }
    long f(long n,long idx,int count_set_bit,int set) {
        if(count_set_bit==3) {
            return 1;
        }
        if(idx<0) return 0;
        
        long ans=0;
        if(isSet(n,idx)) {
            ans+=f(n,idx-1,count_set_bit+1,set&1);
            ans+=f(n,idx-1,count_set_bit,1);
        } else {
            if(set==1) {
                ans+=f(n,idx-1,count_set_bit+1,set);
                ans+=f(n,idx-1,count_set_bit,set);
            } else {
                ans+=f(n,idx-1,count_set_bit,set);
            }
        }
        
        return ans;
    }

    boolean isSet(long n,long idx) {
        long mask = (1l<<idx);
        return (n&mask)!=0;
    }
    
}

/*
Given an array arr[] and an integer K where K is smaller than size of array, the task is to find the Kth smallest element in the given array. It is given that all
array elements are distinct.

Example 1:

Input:
N = 6
arr[] = 7 10 4 3 20 15
K = 3
Output : 7
Explanation :
3rd smallest element in the given 
array is 7.

*/

class Solution{
    public static int kthSmallest(int[] arr, int l, int r, int k) 
    { 
        Arrays.sort(arr);
        return arr[k-1];
    } 
}
