/*
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
*/

class Solution {
    public boolean isValid(String s) {
        if(s.charAt(0)==']'||s.charAt(0)==')'||s.charAt(0)=='}'){
            return false;
        }
        Stack<Character>stk=new Stack<>();
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='('||s.charAt(i)=='['||s.charAt(i)=='{'){
                stk.push(s.charAt(i));
            }else if(s.charAt(i)==')'){
                if(!stk.isEmpty()&&stk.peek()=='('){
                    stk.pop();
                }else{
                    return false;
                }
            }else if(s.charAt(i)==']'){
                if(!stk.isEmpty()&&stk.peek()=='['){
                    stk.pop();
                }else{
                    return false;
                }
            }else if(s.charAt(i)=='}'){
                if(!stk.isEmpty()&&stk.peek()=='{'){
                    stk.pop();
                }else{
                    return false;
                }
            }
        }
        if(!stk.isEmpty()){
            return false;
        }
        return true;
        
    }
}

/*
A string s can be partitioned into groups of size k using the following procedure:

The first group consists of the first k characters of the string, the second group consists of the next k characters of the string, and so on. Each character
can be a part of exactly one group.
For the last group, if the string does not have k characters remaining, a character fill is used to complete the group.
Note that the partition is done so that after removing the fill character from the last group (if it exists) and concatenating all the groups in order, the resultant 
string should be s.

Given the string s, the size of each group k and the character fill, return a string array denoting the composition of every group s has been divided into, using the
above procedure.

 

Example 1:

Input: s = "abcdefghi", k = 3, fill = "x"
Output: ["abc","def","ghi"]
Explanation:
The first 3 characters "abc" form the first group.
The next 3 characters "def" form the second group.
The last 3 characters "ghi" form the third group.
Since all groups can be completely filled by characters from the string, we do not need to use fill.
Thus, the groups formed are "abc", "def", and "ghi".

*/
class Solution {
    public String[] divideString(String s, int k, char fill) {

        int rem=s.length()%k;
        if(rem>0){
            for(int i=rem;i<k;i++){
                s+=fill;
            }
        }
        String[] str=new String[s.length()/k];
        int tem=0;
        for(int i=0;i<s.length();i=i+k){
            str[tem++]=s.substring(i,i+k);

        }
        return str;
    }
}
