/*
Given N nodes of a tree and a list of edges. Find the minimum number of nodes to be selected to light up all the edges of the tree.
An edge lights up when at least one node at the end of the edge is selected.


Example 1:

Input:
N = 6
edges[] = {(1,2), (1,3), (2,4), (3,5), (3,6)}
Output: 2
Explanation: Selecting nodes 2 and 3 lights
up all the edges.

*/
class Solution{
        // code here
         public int fun(int node, int CanLightUp, int parent, 

    ArrayList<ArrayList<Integer>> adj, int [][] dp){

        int ans = 0;

        if(dp[node][CanLightUp] != 0) return dp[node][CanLightUp]; 

        for(Integer child: adj.get(node)){

            if(parent != child){

                if(CanLightUp == 1){

                    int fun0 = fun(child, 0, node, adj, dp);

                    int fun1 = fun(child, 1, node, adj, dp);

                    ans += Math.min(fun0, fun1+1);

                }else{

                    int fun1 = fun(child, 1, node, adj, dp);

                    ans += fun1 + 1;

                }

            }

        }

        return dp[node][CanLightUp] = ans;

    }

    public int countVertex(int N, int[][] edges){

        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();

        for(int i=0; i<N+1; i++) adj.add(new ArrayList<>());

        for(int i=0; i< edges.length; i++) {

            adj.get(edges[i][0]).add(edges[i][1]);

            adj.get(edges[i][1]).add(edges[i][0]);

        }

        int [][] dp = new int[N+1][2];

        // n1 mean we do a light up and 0 mean we doesn't do a light up

        return Math.min(fun(1, 1, -1, adj, dp)+1, fun(1, 0, -1, adj, dp));
    }
}

/*
Given two sorted arrays arr1 and arr2 of size N and M respectively and an element K. The task is to find the element that would be at the kâ€™th position of the final
sorted array.
 

Example 1:

Input:
arr1[] = {2, 3, 6, 7, 9}
arr2[] = {1, 4, 8, 10}
k = 5
Output:
6
Explanation:
The final sorted array would be -
1, 2, 3, 4, 6, 7, 8, 9, 10
The 5th element of this array is 6.

*/

class Solution {
    public long kthElement( int arr1[], int arr2[], int n, int m, int k) {
        int[] arr=new int[n+m];
        for(int i=0;i<n;i++){
            arr[i]=arr1[i];
        }
        for(int i=0;i<m;i++){
            arr[n+i]=arr2[i];
        }
        
        Arrays.sort(arr);
        // for(int i=0;i<arr.length;i++){
        //     System.out.print(arr[i]+" ");
        // }
        return arr[k-1];
        
    }
}

