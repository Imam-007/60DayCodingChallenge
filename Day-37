/*
Given a Linked List of size N, where every node represents a sub-linked-list and contains two pointers:
(i) a next pointer to the next node,
(ii) a bottom pointer to a linked list where this node is head.
Each of the sub-linked-list is in sorted order.
Flatten the Link List such that all the nodes appear in a single level while maintaining the sorted order. 
Note: The flattened list will be printed using the bottom pointer instead of next pointer.

 

Example 1:

Input:
5 -> 10 -> 19 -> 28
|     |     |     | 
7     20    22   35
|           |     | 
8          50    40
|                 | 
30               45
Output:  5-> 7-> 8- > 10 -> 19-> 20->
22-> 28-> 30-> 35-> 40-> 45-> 50.
Explanation:
The resultant linked lists has every 
node in a single level.
(Note: | represents the bottom pointer.)

*/

class GfG
{
     public Node merge(Node l1, Node l2){

        Node temp = new Node(0);

        Node res = temp;

        while(l1 != null && l2 != null){

            if(l1.data  <= l2.data){

                res.bottom = l1;

                l1= l1.bottom;

                res = res.bottom;

            }else{

                res.bottom = l2;

                l2 = l2.bottom;

                res = res.bottom;

            }

        }

        if(l1 != null) res.bottom = l1;

        if(l2 != null) res.bottom = l2;

        temp =temp.bottom;

        return temp;

    }

    Node flatten(Node root)

    {

        if(root.next == null) return root;

        

        Node l2 = flatten(root.next);

        

        Node ans = merge(root, l2);

        return ans;
	// Your code here
    }
}

/*
Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.


Example 1:

Input:
n = 6, X = 13
arr[] = [1 4 45 6 10 8]
Output:
1
Explanation:
The triplet {1, 4, 8} in 
the array sums up to 13.

*/

class Solution
{
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    public static boolean find3Numbers(int arr[], int n, int x) { 
    
       // Your code Here
       Arrays.sort(arr);
       for(int i=0;i<n;i++){
           int num=x-arr[i];
           int low=i+1;
           int high=n-1;
           while(low<high){
               if(arr[low]+arr[high]==num){
                   return true;
               }else if(arr[low]+arr[high]>num){
                   high--;
               }else{
                   low++;
               }
           }
       }
       return false;
    
    }
}
