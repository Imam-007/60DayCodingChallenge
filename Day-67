/*
Given a Binary Search Tree and a target value. You have to find the node whose data is equal to target and return the sum of all descendant node's data which are
vertically below the target node. Initially you are at the root node.
Note: If target node is not present in bst then return -1.

Example 1:

Input:


Target = 35
Output: 32
Explanation: Vertically below 35 is 32.

*/

class Solution
{
        long res = 0l;
    long verticallyDownBST(Node root,int target)
    {
        while(root != null)
        {
            if(root.data > target)
            root = root.left;
            else if(root.data < target)
            root = root.right;
            else
            break;
        }
        if(root == null) return -1l;
        vertical(root, 0);
        res -= target;
        return res;
    }
    private void vertical(Node root, int dir)
    {
        if(root == null) return;
        if(dir == 0)
        res += root.data;
        vertical(root.left, dir-1);
        vertical(root.right, dir+1);
        
    }
}

/*
` A top secret message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
You are an FBI agent. You have to determine the total number of ways that message can be decoded, as the answer can be large return the answer modulo 109 + 7.
Note: An empty digit sequence is considered to have one decoding. It may be assumed that the input contains valid digits from 0 to 9 and If there are leading 0s,
extra trailing 0s and two or more consecutive 0s then it is an invalid string.

Example 1:

Input: str = "123"
Output: 3
Explanation: "123" can be decoded as "ABC"(123),
"LC"(12 3) and "AW"(1 23).

*/

class Solution
{
      // code here
        int mod = (int)(1e9 + 7);
    Integer[] dp = new Integer[10001];
    
    public int CountWays(String str){
        int len = str.length();
        //base case
        if(len == 0) return 1;
        if(str.charAt(0) == '0') return 0;
        
        if(dp[len] != null) return dp[len];
        
        int ans = CountWays(str.substring(1));
        // checking for legit letter 
        if(len > 1 && Integer.parseInt(str.substring(0, 2)) < 27){
            ans = (ans + CountWays(str.substring(2)))%mod;
        }
        return dp[len] = ans;
    }
}
