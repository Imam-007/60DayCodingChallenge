/*
Given a string S of length N containing only lowercase alphabets. You are also given a permutation P of length N containing integers from 0 to N-1. In (i+1)'th day you
can take the P[i] value of the permutation array and replace S[P[i]] with a '?'.

For example in day 1, we can choose index of permutation array is i=0 and replace S[P[0]] with '?'.
Similarly in day 2, we can choose index of permutation array is i=1. You can replace S[P[1]] with '?'.
Similarly in day 3,we can choose index of permutation array is i=2. You can replace S[P[2]] with '?'.

You have to tell the minimum number of days required, such that after it for all index i (0<=i<N-1), if S[i]!='?', then S[i]!=S[i+1].

Example 1:

Input:
N = 4
S = "aabb"
P[] = {2, 1, 3, 0}
Output: 2
Explanation: In day 1, we replace S[P[0]] with '?'. 
After that String S = "aa?b". As we can see S 
still has character 'a' at index 0 and 1.
In day 2, we replace S[P[1]] with '?'. After 
that String S = "a??b". As we can see the String 
has for all index i (0<=i<N-1), if S[i]!='?', then S[i]!=S[i+1].

*/

class Solution {
    public static int getMinimumDays(int N, String S, int[] P) {
        // code here
        int cons = 0;
    for (int i = 0; i < S.length() - 1; i++) {
        if (S.charAt(i) == S.charAt(i + 1)) {
            cons++;
        }
    }
    char[] SArr = S.toCharArray();
    if (cons == 0) {
        return 0;
    }
    for (int i = 0; i < N; i++) {
        int index = P[i];
        if (index != 0 && SArr[index] == SArr[index - 1]) {
            cons--;
        }
        if (index != N - 1 && SArr[index] == SArr[index + 1]) {
            cons--;
        }
        if (cons == 0) {
            return i + 1;
        }
        SArr[index] = '?';
    }
    return -1;
    }
}


/*
Given two sorted arrays arr1[] and arr2[] of sizes n and m in non-decreasing order. Merge them in sorted order without using any extra space. Modify arr1 so that it
contains the first N elements and modify arr2 so that it contains the last M elements.
 

Example 1:

Input: 
n = 4, arr1[] = [1 3 5 7] 
m = 5, arr2[] = [0 2 6 8 9]
Output: 
arr1[] = [0 1 2 3]
arr2[] = [5 6 7 8 9]
Explanation:
After merging the two 
non-decreasing arrays, we get, 
0 1 2 3 5 6 7 8 9.

*/

class Solution
{
    //Function to merge the arrays.
    public static void merge(long arr1[], long arr2[], int n, int m) 
    {
        // code here\
        int len1=arr1.length-1,len2=0;
        while(len1>=0&&len2<m){
            if(arr1[len1]>arr2[len2]){
                long temp=arr1[len1];
                arr1[len1]=arr2[len2];
                arr2[len2]=temp;
                len1--;
                len2++;
            }else{
                break;
            }
        }
        Arrays.sort(arr1);
        Arrays.sort(arr2);
    }
}
