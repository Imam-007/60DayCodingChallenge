/*
Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.

A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.
*/
class Solution {
         int m=0;
    public int maxAncestorDiff(TreeNode root) {
        
        if(root==null) return 0;
        dfs(root);
        return m;
    }
    
    int[] dfs(TreeNode root)
    {
        if(root==null) return null;
        int[] left=dfs(root.left);
        int[] right=dfs(root.right);
        if(left==null&&right==null) return new int[]{root.val,root.val};
        int min=root.val;
        int max=root.val;
        if(left!=null)
        {
            m=Math.max(m,Math.abs(left[0]-root.val));
            m=Math.max(m,Math.abs(left[1]-root.val));
            min=Math.min(min,left[0]);
            max=Math.max(max,left[1]);
        }
        if(right!=null)
        {
            m=Math.max(m,Math.abs(right[0]-root.val));
            m=Math.max(m,Math.abs(right[1]-root.val));
            min=Math.min(min,right[0]);
            max=Math.max(max,right[1]);
        }
        
        return new int[]{min,max};
        
    }
}

/*
Given the chessboard dimensions. Find out the number of ways we can place a black and a white Knight on this chessboard such that they cannot attack each other.

Note:
The knights have to be placed on different squares. A knight can move two squares horizontally and one square vertically (L shaped), or two squares vertically and 
one square horizontally (L shaped). The knights attack each other if one can reach the other in one move.
*/
class BlackAndWhite
{
    //Function to find out the number of ways we can place a black and a 
    //white Knight on this chessboard such that they cannot attack each other.
    static long numOfWays(int N, int M)
    {
        // add your code here
        long ways = 0;

        for(int i=0; i<N; i++){

            for(int j=0; j<M; j++){

                ways += calculateSafePlace(i, j, N, M, N*M-1); 

//N*M-1 : At one position current knight placed itself

            }    

        }

        return ways%1000000007;

    }

    

    static long calculateSafePlace(int i, int j, int N, int M, long totalPosition){

        int unsafe = 0;

        //downward

        if(i+2<N){          

            if(j+1<M)

                unsafe++;

            if(j-1>=0)

                unsafe++;

        }

        

        //upward

        if(i-2>=0){         

            if(j+1<M)

                unsafe++;

            if(j-1>=0)

                unsafe++;

        }

        

        //right

        if(j+2<M){

            if(i+1<N)

                unsafe++;

            if(i-1>=0)

                unsafe++;

        }

        

        //left

        if(j-2>=0){

            if(i+1<N)

                unsafe++;

            if(i-1>=0)

                unsafe++;

        }

        

        return totalPosition - unsafe;
    }
}
