/*
Given N non-negative integers a1,a2,....an where each represents a point at coordinate (i, ai). N vertical lines are drawn such that the two endpoints of line i is at
(i, ai) and (i,0). Find two lines, which together with x-axis forms a container, such that it contains the most water.

Note : In Case of single verticle line it will not be able to hold water.

Example 1:

Input:
N = 4
a[] = {1,5,4,3}
Output: 6
Explanation: 5 and 3 are distance 2 apart.
So the size of the base = 2. Height of
container = min(5, 3) = 3. So total area
= 3 * 2 = 6.

*/

class Solve{
    
    long maxArea(int A[], int len){
        // Code Here
        long ans=0;
        int left,right,width;
        for(int height=1;height<=100;height++) {
            left=0;
            for(int i=0;i<len;i++) {
                if(A[i]>=height) {
                    left=i;
                    break;
                }
            }
            
            right=0;
            for(int i=len-1;i>=0;i--) {
                if(A[i]>=height) {
                    right=i;
                    break;
                }
            }
            width = right-left;
            ans = Math.max(ans,height*width);
        }
        
        return ans;
        
    }
    
}


/*
Given a linked list of N nodes. The task is to check if the linked list has a loop. Linked list can contain self loop.

Example 1:

Input:
N = 3
value[] = {1,3,4}
x(position at which tail is connected) = 2
Output: True
Explanation: In above test case N = 3.
The linked list with nodes N = 3 is
given. Then value of x=2 is given which
means last node is connected with xth
node of linked list. Therefore, there
exists a loop.

*/

class Solution {
    //Function to check if the linked list has a loop.
    public static boolean detectLoop(Node head){
        // Add code here
        Node fastptr=head;
        Node slowptr=head;
        if(head==null){
            return false;
        }else{
            while(fastptr!=null&&fastptr.next!=null){
                fastptr=fastptr.next.next;
                slowptr=slowptr.next;
                if(fastptr==slowptr){
                    return true;
                }
            }
        }
        return false;
    }
    
}
